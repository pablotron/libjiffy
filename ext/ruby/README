Jiffy-Ruby 0.1.0 README
=======================

Table of Contents
=================

  1. Overview
  2. Compiling Jiffy-Ruby
  3. Using Jiffy-Ruby
  4. About the Author

Overview
========
Simple Ruby bindings for Jiffy.  These bindings also include a
traditional DOM-style JSON encoder and parser, accessible via
`Jiffy.encode` and `Jiffy.decode` methods.  See the "Using Jiffy-Ruby"
section below for additional details.

Compiling Jiffy-Ruby
====================
To build the Jiffy-Ruby bindings, do this:

    # configure and compile Jiffy-Ruby
    ruby ./setup.rb config && ruby ./setup.rb setup 

    # install Jiffy-Ruby
    sudo ruby ./setup.rb install
  
Using Jiffy-Ruby
================
A simple example:

    # load library
    require 'jiffy'

    # sample json data
    DATA = "[1, 2, 3, 4, 5]"

    begin 
      # parse json
      Jiffy.parse(DATA) do |type, val| 
        # determine the type of data
        case type
        when Jiffy::TYPE_INTEGER
          # print integers on the screen
          puts "got integer: #{val}"
        else
          # ignore other types of data
        end
      end
    rescue Jiffy::Error => err
      # catch any parsing errors
      $stderr.puts "ERROR: #{err}"
    end

You can also create a Parser instance, like this:

    # create parser instance
    p = Jiffy::Parser.new

    # parse text
    p.parse(some_text) do |type, val| 
      # do parsing here
    end

    # mark parser as done
    p.done

You can also call the parser with a block (similar to File::open), like
so:

    # several chunks of data
    DATA = [
      '[',
      '"foo",',
      '99,',
      'true,',
      'null',
      ']',
    ]

    begin 
      # create parser
      Jiffy::Parser.new do |p|
        # iterate over data chunks
        DATA.each do |chunk|
          # parse chunk
          p.parse(chunk) do |type, val|
            # this is a slightly more elaborate example of the block
            # above.  basically we're handling several more types,
            # including string fragments
            case type
            when Jiffy::TYPE_INTEGER
              puts "got integer: #{val}"
            when Jiffy::TYPE_FLOAT
              puts "got float: #{val}"
            when Jiffy::TYPE_BGN_STRING
              puts "begin string"
            when Jiffy::TYPE_END_STRING
              puts "end string"
            when Jiffy::TYPE_STRING_FRAGMENT
              puts "got string fragment: #{val}"
            when Jiffy::TYPE_TRUE
              puts "got true"
            when Jiffy::TYPE_FALSE
              puts "got false"
            when Jiffy::TYPE_NULL
              puts "got null"
            end
          end
        end

        # note: we don't need to call done here, because
        # Jiffy automatically does it at the end of the block
      end
    rescue Jiffy::Error => err
      # catch any parsing errors
      $stderr.puts "ERROR: #{err}"
    end

Jiffy also includes a traditional DOM-style JSON encoder and parser,
accessible via the `Jiffy.encode` and `Jiffy.decode` methods:

    #
    # Jiffy.encode example:
    #
    >> Jiffy.encode({'apples' => 99, 'oranges' => 12, 'need' => %w{pears}, 'tasty' => false})
    => "({\"need\":[\"pears\"],\"tasty\":false,\"apples\":99,\"oranges\":12})"

    # 
    # Jiffy.decode example:
    # 
    >> Jiffy.decode('{"key":[true,false,null,99.6]}')
    => {"key"=>[true, false, nil, 99.6]}

About the Author
================
Paul Duncan (pabs@pablotron.org)
http://pablotron.org/
