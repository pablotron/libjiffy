Jiffy 0.1.0 README
==================

Introduction
============
Jiffy is a fast, lightweight, and reentrant JSON stream parser.  Jiffy
is extremely portable; it is written in pure ANSI C and has no external
dependencies.  A Jiffy parser uses about 1 kilobyte of memory and never
allocates any additional memory, which makes it ideal for embedded
systems or systems that are otherwise memory-constrained.

Compiling Jiffy
===============

  1. Edit the top-level Makefile.
  2. Type `make` to compile Jiffy.
  3. Type `make install` to install Jiffy.

You can also link Jiffy statically into your program using the
file `src/libjiffy.a`, or by copying `src/jiffy.c` to your source files
and the `include/jiffy/` directory to your include directory.

Using Jiffy
===========
Using Jiffy is a 4-step process:

  1. Create a parser callback that handles your data (see below). 
  2. Initialize a parser context using `jf_init()`.
  3. Pass any amount of JSON data to your parser using `jf_parse()`.
  4. Finish parsing by calling `jf_done()`.

Here's a simple example of a parser callback that prints any integer
found in a JSON stream:

    static jf_err_t
    parse_cb(jf_t *parser, jf_type_t type, const char *val, const size_t len) {
      char buf[JF_MAX_BUF_LEN];

      /* we only care about integer values */
      if (type == JF_TYPE_INTEGER) {
        /* copy and null-terminate value */
        memcpy(buf, val, len);
        buf[len] = '\0';

        /* print integer and byte offset */
        printf("got integer %s at byte %lu\n", buf, p->num_bytes);
      }

      /* continue parsing */
      return JF_OK;
    }

Here's the basic main() file that goes with the `parse_cb()` function
above:

    int main(int argc, char *argv[]) {
      char buf[BUFSIZ], err_buf[1024];
      size_t len;
      jf_t parser;
      jf_err_t err;

      /* initialize parser and bind it to the parser callback */
      jf_init(&parser, (jf_cb_t) parse_cb);

      /* read JSON stream from standard input */
      while (!feof(stdin) && (len = fread(buf, 1, sizeof(buf), stdin)) > 0) {
        /* parse input */
        err = jf_parse(parser, buf, len, 1);

        /* check for parsing error */
        if (err != JF_OK) {
          /* print Jiffy error string to err_buf */
          jf_strerror_r(err, err_buf, sizeof(err_buf));

          /* print message to standard error and exit */
          fprintf(stderr, "ERROR: %s\n", err_buf);
          return EXIT_FAILURE;
        }
      }

      /* return success */
      return EXIT_SUCCESS;
    }

Here's a slightly more complex example which parses an input stream
containing an array of integers can be found in the file
`tests/parse_int_array.c`.

Jiffy also includes a simple binding for the Ruby programming language
(http://ruby-lang.org/).  It isn't compiled by default, 
